class Elm_Naviframe_Item(Elm_Widget_Item)
{
   eo_prefix: elm_obj_naviframe_item;
   properties {
        style {
             get {
                 /*@
                  Get an item style

                  @see also elm_naviframe_item_style_set()

                  @ingroup Naviframe
                  */
             }
             set {
                 /*@
                  Set an item style

                  The following styles are available for this item:
                  @li @c "default"

                  @see also elm_naviframe_item_style_get()

                  @ingroup Naviframe
                 */
             }
             values {
                 const (char) *style; /*@ The current item style name. @c NULL would be default */
             }
        }
   }
   methods {
      pop_to {
            /*@
             Pop the top item and delete the items between the top and the above
             one on the given item.

             The items between the top and the given item will be deleted first,
             and then the top item will be popped at last.

             @ingroup Naviframe
            */
        }
      title_enabled_get @const {
            /*@
             Get a value whether title area is enabled or not.

             @see also elm_naviframe_item_title_enabled_set()

             @ingroup Naviframe
            */
            return: bool; /*@ If @c EINA_TRUE, title area will be enabled, disabled otherwise */
        }
      title_enabled_set {
            /*@
             Enable/Disable the title area with transition effect

             When the title area is disabled, then the controls would be hidden so as
             to expand the content area to full-size.

             @see also elm_naviframe_item_title_enabled_get()

             @ingroup Naviframe
            */
            params {
                @in Eina_Bool enable; /*@ If @c EINA_TRUE, title area will be enabled, disabled otherwise */
                @in Eina_Bool transition; /*@ If @c EINA_TRUE, transition effect of the title will be visible, invisible otherwise */
             }
        }
      promote {
            /*@
             @if MOBILE @since_tizen 2.3
             @elseif WEARABLE @since_tizen 2.3.1
             @endif

             @ingroup Naviframe

             Promote an item already in the naviframe stack to the top of the stack

             This will take the indicated item and promote it to the top of the stack
             as if it had been pushed there. The item must already be inside the
             naviframe stack to work.
             */
        }

      pop_cb_set {
            /*@
             Set a function to be called when @c it of the naviframe is going to be
             popped.

             @param func the callback function.

             @warning Don't set "clicked" callback to the prev button additionally if the
             function does an exact same logic with this @c func. When hardware back key
             is pressed then both callbacks will be called.

             @since 1.8
             @ingroup Naviframe
             */
             params {
                  @in Elm_Naviframe_Item_Pop_Cb func; /*@ The callback function */
                  @in void *data; /*@ Data to be passed to func call */
             }
        }
   }
   implements {
        Eo.Base.constructor;
        Eo.Base.destructor;
        Elm_Widget_Item.signal_emit;
        Elm_Widget_Item.part_text.set;
        Elm_Widget_Item.part_text.get;
        Elm_Widget_Item.part_content.get;
        Elm_Widget_Item.part_content.set;
        Elm_Widget_Item.part_content_unset;
   }
}
